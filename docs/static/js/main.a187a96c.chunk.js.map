{"version":3,"sources":["utils.tsx","Tile.tsx","Tiles.tsx","App.tsx","index.tsx"],"names":["getKey","combination","map","row","join","Tile","rowsCount","columnsCount","legend","imgSrc","getPosition","rows","Array","from","keys","columns","style","margin","position","float","key","height","column","alt","src","width","transform","defaultProps","Tiles","motifWidth","motifHeight","linePatterns","Combinatorics","baseN","toArray","allCombinations","alreadySeen","worldOfPossible","filter","skip","result","length","i","j","newCombination","h","push","newRow","w","getTranslations","comb","forEach","k","rowRenderer","index","coordinate","rowCount","rowHeight","getMarks","max","reduce","marks","App","commands","content","useState","setImgSrc","mode","setMode","setMotifWidth","setMotifHeight","React","updateState","maxWidth","Math","floor","maxHeight","Item","label","min","onChange","value","type","onClick","random","layout","size","listType","showUploadList","beforeUpload","file","reader","FileReader","onload","e","target","readAsDataURL","UploadOutlined","Group","Button","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a187a96c.chunk.js","sourcesContent":["export const getKey = (combination: number[][]) => {\n  return combination.map((row) => row.join(\"\")).join(\"\");\n};\n\nexport const getTranslations = (combination: number[][]) => {\n  const result: number[][][] = [];\n\n  const height = combination.length;\n  const width = combination[0].length;\n\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      const newCombination = [];\n      for (let h = 0; h < height; h++) {\n        newCombination[h] = combination[(h + j) % height];\n      }\n\n      result.push(\n        newCombination.map((row) => {\n          const newRow = [];\n          for (let w = 0; w < width; w++) {\n            newRow[w] = row[(w + i) % width];\n          }\n          return newRow;\n        })\n      );\n    }\n  }\n\n  return result;\n};\n","import React from \"react\";\n\nfunction Tile({\n  rowsCount,\n  columnsCount,\n  legend,\n  imgSrc,\n  getPosition,\n}: {\n  rowsCount: number;\n  columnsCount: number;\n  imgSrc: string;\n  legend: string;\n  getPosition: (coordinate: { row: number; column: number }) => number;\n}) {\n  const imgSize = 30;\n  const imgMargin = 10;\n\n  const rows = Array.from(Array(rowsCount).keys());\n  const columns = Array.from(Array(columnsCount).keys());\n\n  return (\n    <div\n      style={{\n        margin: imgMargin,\n        position: \"relative\",\n        float: \"left\",\n      }}\n    >\n      {legend}\n      {rows.map((row) => {\n        return (\n          <div key={row} style={{ height: imgSize }}>\n            {columns.map((column) => {\n              return (\n                <img\n                  alt=\"\"\n                  key={column}\n                  src={imgSrc}\n                  style={{\n                    width: imgSize,\n                    transform: `rotate(${\n                      getPosition({ row, column }) * 90\n                    }deg)`,\n                  }}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nTile.defaultProps = {\n  imgSrc: \"./tile.png\",\n};\n\nexport default Tile;\n","import React, { CSSProperties } from \"react\";\nimport Combinatorics from \"js-combinatorics\";\nimport { AutoSizer, List } from \"react-virtualized\";\nimport { getKey, getTranslations } from \"./utils\";\nimport Tile from \"./Tile\";\n\nfunction Tiles({\n  rowsCount,\n  columnsCount,\n  motifWidth,\n  motifHeight,\n  imgSrc,\n}: {\n  rowsCount: number;\n  columnsCount: number;\n  imgSrc: string;\n  motifWidth: number;\n  motifHeight: number;\n}) {\n  const imgSize = 30;\n  const imgMargin = 10;\n\n  const positions = [0, 1, 2, 3];\n\n  const linePatterns = Combinatorics.baseN(positions, motifWidth).toArray();\n  const allCombinations = Combinatorics.baseN(\n    linePatterns,\n    motifHeight\n  ).toArray();\n\n  const alreadySeen: { [key: string]: boolean } = {};\n  const worldOfPossible = allCombinations.filter((combination) => {\n    const key = getKey(combination);\n    const skip = alreadySeen[key];\n\n    if (!alreadySeen[key]) {\n      const allTranslations = getTranslations(combination);\n\n      allTranslations\n        .map((comb) => getKey(comb))\n        .forEach((k) => {\n          alreadySeen[k] = true;\n        });\n\n      alreadySeen[key] = true;\n    }\n\n    return !skip;\n  });\n\n  const rowRenderer = ({\n    index,\n    key,\n    style,\n  }: {\n    index: number;\n    key: string;\n    style: CSSProperties;\n  }) => (\n    <div key={key} style={style}>\n      <Tile\n        rowsCount={rowsCount}\n        columnsCount={columnsCount}\n        imgSrc={imgSrc}\n        legend={`â„– ${index}`}\n        getPosition={(coordinate) =>\n          worldOfPossible[index][coordinate.row % motifHeight][\n            coordinate.column % motifWidth\n          ]\n        }\n      />\n    </div>\n  );\n\n  return (\n    <div>\n      <div>Generated {worldOfPossible.length} patterns</div>\n      <div style={{ height: \"calc(100vh - 72px)\" }}>\n        <AutoSizer>\n          {({ height, width }) => (\n            <List\n              rowCount={worldOfPossible.length}\n              height={height}\n              rowHeight={imgSize * rowsCount + 2 * imgMargin}\n              rowRenderer={rowRenderer}\n              width={width}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n}\n\nTiles.defaultProps = {\n  imgSrc: \"./tile.png\",\n  motifWidth: 1,\n  motifHeight: 1,\n};\n\nexport default Tiles;\n","import React, { useState, ReactNode } from \"react\";\nimport \"./App.css\";\nimport { Form, Slider, Upload, Button, Radio } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport Tiles from \"./Tiles\";\nimport Tile from \"./Tile\";\n\nconst MAX_COMBINATIONS = 9;\nconst getMarks = (max: number) =>\n  Array.from(new Array(max).keys()).reduce(\n    (marks, key) => ({ ...marks, [key + 1]: key + 1 }),\n    {}\n  );\nconst randomIntFromInterval = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min + 1) + min);\n\nfunction App() {\n  const rowsCount = 12;\n  const columnsCount = 8;\n\n  const [imgSrc, setImgSrc] = useState<string>();\n  const [mode, setMode] = useState<string>(\"patterns\");\n  const [motifWidth, setMotifWidth] = useState<number>(1);\n  const [motifHeight, setMotifHeight] = useState<number>(1);\n  const [, updateState] = React.useState();\n\n  const maxWidth = Math.floor(MAX_COMBINATIONS / motifHeight);\n  const maxHeight = Math.floor(MAX_COMBINATIONS / motifWidth);\n\n  let commands: ReactNode;\n  let content: ReactNode;\n  if (mode === \"patterns\") {\n    commands = [\n      <Form.Item key=\"width\" label=\"Pattern width\">\n        <Slider\n          style={{ width: 120 }}\n          min={1}\n          max={maxWidth}\n          marks={getMarks(maxWidth)}\n          onChange={(value) => {\n            setMotifWidth(value as any);\n          }}\n        />\n      </Form.Item>,\n      <Form.Item key=\"height\" label=\"Pattern height\">\n        <Slider\n          style={{ width: 120 }}\n          min={1}\n          max={maxHeight}\n          marks={getMarks(maxHeight)}\n          onChange={(value) => {\n            setMotifHeight(value as any);\n          }}\n        />\n      </Form.Item>,\n    ];\n\n    content = (\n      <Tiles\n        rowsCount={rowsCount}\n        columnsCount={columnsCount}\n        imgSrc={imgSrc}\n        motifWidth={motifWidth}\n        motifHeight={motifHeight}\n      />\n    );\n  } else {\n    commands = (\n      <Form.Item>\n        <Button\n          style={{ margin: 5 }}\n          type=\"primary\"\n          onClick={() => updateState({})}\n        >\n          Generate\n        </Button>\n      </Form.Item>\n    );\n\n    content = [1, 2, 3].map((index) => (\n      <Tile\n        rowsCount={rowsCount}\n        columnsCount={columnsCount}\n        imgSrc={imgSrc}\n        legend={`Random ${index}`}\n        getPosition={() => randomIntFromInterval(0, 3)}\n      />\n    ));\n  }\n\n  return (\n    <div>\n      <Form layout=\"inline\" size=\"small\">\n        <Form.Item>\n          <Upload\n            listType=\"picture\"\n            showUploadList={false}\n            beforeUpload={(file) => {\n              const reader = new FileReader();\n\n              reader.onload = (e) => {\n                setImgSrc(e?.target?.result as any);\n              };\n              reader.readAsDataURL(file);\n\n              // Prevent upload\n              return false;\n            }}\n          >\n            <Button style={{ margin: 5 }}>\n              <UploadOutlined /> Upload Tile\n            </Button>\n          </Upload>\n        </Form.Item>\n        <Form.Item>\n          <Radio.Group\n            value={mode}\n            onChange={(value) => {\n              setMode(value.target.value);\n            }}\n            size=\"small\"\n            style={{ margin: 5 }}\n          >\n            <Radio.Button value=\"patterns\">Patterns</Radio.Button>\n            <Radio.Button value=\"random\">Random</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        {commands}\n      </Form>\n      {content}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}